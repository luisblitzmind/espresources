esphome:
  name: jc3248w535
  friendly_name: JC3248W535
  platformio_options:
    upload_speed: 921600
    build_unflags: -Werror=all
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L

external_components:
  #- source: github://buglloc/esphome-components
  #- source:  github://Garag/esphome-components
  - source:  github://clowrey/esphome-components
    components: [axs15231]
    refresh: 10min

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80000000.0

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret ha_api_key

ota:
  - platform: esphome
    password: !secret ota_pwd

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Jc3248W535 Fallback Hotspot"
    password: ""

captive_portal:
    
color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_gray
    red: 70%
    green: 70%
    blue: 70%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "gfonts://Roboto"
    id: Roboto_48
    size: 48
  - file: "gfonts://Roboto"
    id: Roboto_36
    size: 36
  - file: "gfonts://Roboto"
    id: Roboto_24
    size: 24
  - file: "gfonts://Roboto"
    id: Roboto_12
    size: 12
  - file: "gfonts://Roboto"
    id: font_std
    size: 40
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/\\[]|&@#'"
  - file: "gfonts://Roboto@700"
    id: font_title
    size: 40
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/\\[]|&@#'"
  




time:
  - platform: homeassistant
    id: esptime

    
spi:
  id: display_qspi
  type: quad
  clk_pin: 47
  data_pins: [21, 48, 40, 39]

i2c:
  sda: 4
  scl: 8
  id: touchscreen_bus


# This is where i will place the entities i want to control
switch:
  - platform: homeassistant
    id: shelly_switch
    entity_id: switch.shellyplus1_8813bfcfd20c_switch_0

globals:
  - id: bgcolor
    type: Color
    initial_value: "Color(0, 0, 0)"

display:
  - platform: axs15231
    data_rate: 40MHz #20mhz is default
    #spi_mode: MODE2
    id: main_display
    spi_id: display_qspi
    dimensions:
      height: 480
      width: 320
    cs_pin: 45
    backlight_pin: 1
    brightness: 50
    transform:
      swap_xy: false
    rotation: 90
    auto_clear_enabled: false
    lambda: |-
      
      it.fill(id(bgcolor));

      // Define button dimensions and spacing
      int btn_width = 200;
      int btn_height = 80;
      int h_spacing = 20;
      int v_spacing = 20;
      int start_x = (it.get_width() - (2*btn_width + h_spacing))/2;
      int start_y = (it.get_height() - (3*btn_height + 2*v_spacing))/2;

      // Button colors
      Color btn_color = Color(0, 0, 255); // Blue for off state
      Color active_btn_color = Color(0, 255, 0); // Green for on state
      Color text_color = Color(255, 255, 255); // White
      Color active_text_color = Color(255, 255, 0); // Yellow for on state

      // Button labels
      const char* labels[6] = {"Luz", "2", "3", "4", "5", "6"};
      
      // Draw 6 buttons (2x3 grid)
      for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 2; col++) {
          int index = row * 2 + col;
          int x = start_x + col * (btn_width + h_spacing);
          int y = start_y + row * (btn_height + v_spacing);
          
          // For the first button, check the state of the light switch
          if (index == 0) {
            bool is_on = id(shelly_switch).state;
            // Use different color based on state, but always show "Luz" label
            it.rectangle(x, y, btn_width, btn_height, is_on ? active_btn_color : btn_color);
            // Change text color to yellow when on, white when off
            it.print(x + btn_width/2, y + btn_height/2, id(font_std), is_on ? active_text_color : text_color, TextAlign::CENTER, labels[index]);
          } else {
            // Draw other buttons as before
            it.rectangle(x, y, btn_width, btn_height, btn_color);
            it.print(x + btn_width/2, y + btn_height/2, id(font_std), text_color, TextAlign::CENTER, labels[index]);
          }
        }
      }

touchscreen:
  - platform: axs15231
    id: main_touch
    display: main_display
    i2c_id: touchscreen_bus
    transform:
      swap_xy: true
    on_touch:
      - lambda: |-
          // Define button dimensions and spacing
          int btn_width = 200;
          int btn_height = 80;
          int h_spacing = 20;
          int v_spacing = 20;
          
          // Get display dimensions
          int display_width = id(main_display).get_width();
          int display_height = id(main_display).get_height();
          
          int start_x = (display_width - (2*btn_width + h_spacing))/2;
          int start_y = (display_height - (3*btn_height + 2*v_spacing))/2;
          
          // Log touch coordinates for debugging
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
                touch.x,
                touch.y,
                touch.x_raw,
                touch.y_raw
              );
          
          // It seems the Y coordinate is inverted - adjust for this
          int adjusted_y = display_height - touch.y;
          
          // Debug the adjusted coordinates
          ESP_LOGI("adjusted", "x=%d, adjusted_y=%d", touch.x, adjusted_y);
          
          // Check if touch is within any button
          for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 2; col++) {
              int index = row * 2 + col;
              int x = start_x + col * (btn_width + h_spacing);
              int y = start_y + row * (btn_height + v_spacing);
              
              // Check if touch is within this button using adjusted coordinates
              if (touch.x >= x && touch.x <= x + btn_width && 
                  adjusted_y >= y && adjusted_y <= y + btn_height) {
                
                // First button controls the Shelly switch
                if (index == 0) {
                  id(shelly_switch).toggle();
                  ESP_LOGI("touch", "Toggled Shelly switch (Button 1)");
                } else {
                  ESP_LOGI("touch", "Button %d pressed", index + 1);
                  // Add actions for other buttons here as needed
                }
              }
            }
          }
          
